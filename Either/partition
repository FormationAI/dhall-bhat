    let Either = ./Type

in    λ(a : Type)
    → λ(b : Type)
    → λ(eithers : List (Either a b))
    →     let left =
                  λ(acc : { _1 : List a, _2 : List b })
                → λ(x : a)
                → { _1 = [ x ] # acc._1, _2 = acc._2 }
      
      in  let right =
                  λ(acc : { _1 : List a, _2 : List b })
                → λ(y : b)
                → { _1 = acc._1, _2 = [ y ] # acc._2 }
      
      in  List/fold
          (Either a b)
          eithers
          { _1 : List a, _2 : List b }
          (   λ(e : Either a b)
            → λ(acc : { _1 : List a, _2 : List b })
            → ./fold a b { _1 : List a, _2 : List b } (left acc) (right acc) e
          )
          { _1 = [] : List a, _2 = [] : List b }
