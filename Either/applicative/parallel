    let Semigroup =
          ./../../Semigroup/Type Type ./../../Function/Type ./../../Tuple/Type

in  let Either = ./../Type

in    λ(a : Type)
    → λ(semigroup : Semigroup a)
    → ./../../Applicative/fromPureAp
      (Either a)
      (λ(b : Type) → λ(x : b) → < Right = x | Left : a >)
      (   λ(b : Type)
        → λ(c : Type)
        → λ(g : Either a (b → c))
        → λ(fa : Either a b)
        → merge
          { Left =
                λ(l : a)
              → merge
                { Left =
                      λ(ll : a)
                    → < Left = semigroup.op { _1 = l, _2 = ll } | Right : c >
                , Right =
                    λ(_ : b) → < Left = l | Right : c >
                }
                fa
          , Right =
              λ(f : b → c) → (./../functor/endo/set a).map b c f fa
          }
          g
      )
