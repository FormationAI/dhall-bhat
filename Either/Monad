    let Monad = ./../Monad/Type

in  let Either = ./Type

in    λ(a : Type)
    →   ./../Monad/fromPureBind
        (Either a)
        (λ(b : Type) → λ(x : b) → < Right = x | Left : a >)
        (   λ(b : Type)
          → λ(c : Type)
          → λ(fa : Either a b)
          → λ(k : b → Either a c)
          →     let map = (./functor/endo/types a).map
            
            in  merge
                { Left =
                    λ(l : a) → < Left = l | Right : c >
                , Right =
                    λ(e : Either a c) → e
                }
                (map b (Either a c) k fa)
        )
      : Monad (Either a)
