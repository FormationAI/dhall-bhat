    let Either = ./Type

in  let Monoid = ./../Monoid/Type

in    λ(m : Type)
    → λ(monoid : Monoid m)
    →   { mapOptional =
              λ(a : Type)
            → λ(b : Type)
            → λ(k : a → Optional b)
            → λ(either : Either m a)
            →     let E = constructors (Either m b)
              
              in  merge
                  { Left =
                      λ(x : m) → E.Left x
                  , Right =
                        λ(y : a)
                      → Optional/fold
                        b
                        (k y)
                        (Either m b)
                        E.Right
                        (E.Left monoid.unit)
                  }
                  either
        }
      : ./../Compactable/Type (Either m)
