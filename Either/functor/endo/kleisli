  λ(m : Type → Type)
→ λ(applicative : ./../../../Applicative/Type m)
→ λ(a : Type)
→   { map =
          λ(b : Type)
        → λ(c : Type)
        → λ(f : b → m c)
        → ( ./../fromProduct/pair
            m
            (./../../../Applicative/extractFunctor m applicative)
          ).map
          a
          b
          a
          c
          { _1 = applicative.pure a, _2 = f }
    }
  : ./../../../Functor/Endo/Kleisli m (./../../Type a)
