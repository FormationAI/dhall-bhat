    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cArrow : kArrow (kProduct cObject cObject) Type)
    → λ(cCategory : ./../Category/Type cObject cArrow)
    → λ(dObject : Kind)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(a : cObject)
    →   { map =
              λ(b : dObject)
            → λ(c : dObject)
            → λ(_ : dArrow { _1 = b, _2 = c })
            → cCategory.identity a
        }
      : ./../Functor/Type
        dObject
        cObject
        dArrow
        cArrow
        (./Type cObject dObject a)
