  λ(cObject : Kind)
→ λ(cpObject : Kind)
→ λ(cpArrow : cpObject → cpObject → Type)
→     let dObject = Type
  
  in    λ(dArrow : dObject → dObject → Type)
      → λ(dSemigroupoid : ./../Semigroupoid/Type dObject dArrow)
      → λ(h : cpObject → dObject)
      → λ(functor : ./../Functor/Type cpObject dObject cpArrow dArrow h)
      → λ(f : cObject → cpObject)
      → λ(g : cObject → dObject)
      → λ(duplicate : ∀(b : cObject) → dArrow (g b) (h (f b)))
      → λ(a : cpObject)
      → λ(lan : ./Type cObject cpObject cpArrow dArrow f g a)
      → lan
        (h a)
        (   λ(b : cObject)
          → λ(k : cpArrow (f b) a)
          → dSemigroupoid.op
            (g b)
            (h a)
            (   λ(r : Type)
              → λ ( arrowsOut
                  : ∀(z : dObject) → dArrow z (h a) → dArrow (g b) z → r
                  )
              → arrowsOut (h (f b)) (functor.map (f b) a k) (duplicate b)
            )
        )
