    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cpObject : Kind)
    → λ(cpArrow : kArrow (kProduct cpObject cpObject) Type)
    → λ(cpSemigroupoid : ./../Semigroupoid/Type cpObject cpArrow)
    →     let dObject = Type
      
      in  let dArrow = ./../uncurryT Type Type Type ./../Function/Type
      
      in  let Ran = ./Type cObject cpObject cpArrow
      
      in    λ(p : kArrow cObject cpObject)
          → λ(f : kArrow cObject dObject)
          →   { map =
                    λ(a : cpObject)
                  → λ(b : cpObject)
                  → λ(fn : cpArrow { _1 = a, _2 = b })
                  → λ(ran : Ran p f a)
                  → λ(c : cObject)
                  → λ(k : cpArrow { _1 = b, _2 = p c })
                  → ran
                    c
                    ( cpSemigroupoid.op
                      { _1 = a, _2 = p c }
                      (   λ(r : Type)
                        → λ ( arrowsOut
                            :   ∀(z : cpObject)
                              → cpArrow { _1 = z, _2 = p c }
                              → cpArrow { _1 = a, _2 = z }
                              → r
                            )
                        → arrowsOut b k fn
                      )
                    )
              }
            : ./../Functor/Type cpObject dObject cpArrow dArrow (Ran p f)
