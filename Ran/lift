    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(cObject : Kind)
    → λ(cpObject : Kind)
    → λ(dObject : Kind)
    → λ(cpArrow : kArrow (kProduct cpObject cpObject) Type)
    → λ(dArrow : kArrow (kProduct dObject dObject) Type)
    → λ(dSemigroupoid : ./../Semigroupoid/Type dObject dArrow)
    → λ(h : kArrow cpObject dObject)
    → λ(functor : ./../Functor/Type cpObject dObject cpArrow dArrow h)
    → λ(f : kArrow cObject cpObject)
    → λ(g : kArrow cObject dObject)
    → λ(join : ∀(b : cObject) → dArrow { _1 = h (f b), _2 = g b })
    → λ(a : cpObject)
    → λ(b : cObject)
    → λ(k : cpArrow { _1 = a, _2 = f b })
    → dSemigroupoid.op
      { _1 = h a, _2 = g b }
      (   λ(r : Type)
        → λ ( arrowsOut
            :   ∀(z : dObject)
              → dArrow { _1 = z, _2 = g b }
              → dArrow { _1 = h a, _2 = z }
              → r
            )
        → arrowsOut (h (f b)) (join b) (functor.map a (f b) k)
      )
