--     let NonEmpty = ./Type

-- in  let List/Applicative = ./../List/Applicative

-- in    { identity =
--           λ(a : Type) → λ(x : a) → { head = x, tail = [] : List a }
--       , ap =
--             λ(a : Type)
--           → λ(b : Type)
--           → λ(nelF : NonEmpty (a → b))
--           → λ(nel : NonEmpty a)
--           → { head =
--                 nelF.head nel.head
--             , tail =
--                 List/Applicative.ap a b (./toList (a → b) nelF) (./toList a nel)
--             }
--       }
--     : ./../Applicative/Type Type ./../Function/Type NonEmpty
<>
