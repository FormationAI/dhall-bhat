let Traversable = ../Traversable/Type

let Applicative = ../Applicative/Type

let NonEmpty = ./Type

let List/Traversable = ../List/traversable

in    ../Traversable/fromTraverse
        NonEmpty
        ( λ(f : Type → Type) →
          λ(applicative : Applicative f) →
          λ(a : Type) →
          λ(b : Type) →
          λ(k : a → f b) →
          λ(nel : NonEmpty a) →
            applicative.ap
              (List b)
              (NonEmpty b)
              ( applicative.map
                  b
                  (List b → NonEmpty b)
                  (λ(h : b) → λ(t : List b) → { head = h, tail = t })
                  (k nel.head)
              )
              (List/Traversable.traverse f applicative a b k nel.tail)
        )
    : Traversable NonEmpty
