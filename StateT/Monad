    let Monad = ../Monad/Type 

in  let StateT = ./Type 

in  let toFunctor = ../Functor/fromMonad 

in    λ(s : Type)
    → λ(m : Type → Type)
    → λ(monad : Monad m)
    → (   { map =
              (./Functor  s m (toFunctor m monad)).map
          , pure =
              (./Applicative  s m monad).pure
          , ap =
              (./Applicative  s m monad).ap
          , bind =
                λ(a : Type)
              → λ(b : Type)
              → λ(fa : StateT s m a)
              → λ(k : a → StateT s m b)
              → λ(new : s)
              → monad.bind
                { val : a, state : s }
                { val : b, state : s }
                (fa new)
                (λ(res : { val : a, state : s }) → k res.val res.state)
          }
        : Monad (StateT s m)
      )
