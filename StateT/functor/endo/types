    let Functor = ./../../../Functor/Endo/Types

in  let StateT = ./../../Type

in    λ(s : Type)
    → λ(m : Type → Type)
    → λ(functor : Functor m)
    →   { map =
              λ(a : Type)
            → λ(b : Type)
            → λ(f : a → b)
            → λ(fa : StateT s m a)
            → λ(new : s)
            → functor.map
              { val : a, state : s }
              { val : b, state : s }
              (   λ(res : { val : a, state : s })
                → { val = f res.val, state = res.state }
              )
              (fa new)
        }
      : Functor (StateT s m)
