let Reader = ./Type

let Applicative = ../Applicative/Type

in  λ(r : Type) →
          ./functor r
        ∧ { pure = λ(a : Type) → λ(x : a) → λ(env : r) → x
          , ap =
              λ(a : Type) →
              λ(b : Type) →
              λ(g : Reader r (a → b)) →
              λ(fa : Reader r a) →
              λ(env : r) →
                g env (fa env)
          }
      : Applicative (Reader r)
