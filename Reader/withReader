    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(object : Kind)
    → λ(arrow : kArrow (kProduct object object) Type)
    → λ(semigroupoid : ./../Semigroupoid/Type object arrow)
    → λ(e : object)
    → λ(a : object)
    → λ(ePrime : object)
    → λ(f : arrow { _1 = ePrime, _2 = e })
    → λ(reader : ./Type object arrow e a)
    → semigroupoid.op
      { _1 = ePrime, _2 = a }
      (   λ(r : Type)
        → λ ( fn
            :   ∀(z : object)
              → arrow { _1 = z, _2 = a }
              → arrow { _1 = ePrime, _2 = z }
              → r
            )
        → fn e reader f
      )
