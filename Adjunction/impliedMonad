  λ(cObject : Kind)
→ λ(cArrow : cObject → cObject → Type)
→ λ(dObject : Kind)
→ λ(dArrow : dObject → dObject → Type)
→ λ(f : dObject → cObject)
→ λ(g : cObject → dObject)
→ λ(gFunctor : ./../Functor/Type cObject cArrow dObject dArrow g)
→ λ(adjunction : ./Type cObject cArrow dObject dArrow f g)
→   { identity =
        adjunction.unit
    , op =
          λ(a : dObject)
        → gFunctor.map (f (g (f a))) (f a) (adjunction.counit (f a))
    }
  : ./../Monad/Type
    dObject
    dArrow
    (./../Compose/Type dObject cObject dObject g f)
