--   λ(cObject : Kind)
-- → λ(cArrow : cObject → cObject → Type)
-- → λ(dObject : Kind)
-- → λ(dArrow : dObject → dObject → Type)
-- → λ(f : dObject → cObject)
-- → λ(g : cObject → dObject)
-- → λ(adjunction : ./Type cObject cArrow dObject dArrow f g)
-- → { identity =
--       adjunction.counit
--   , op =
--       λ(a : dObject) → map a (g (f a)) (adjunction.unit a)
--   }
--   ./../Comonad/Type
--   cObject
--   cArrow
--   (./../Compose/Type cObject dObject cObject f g)
<>
