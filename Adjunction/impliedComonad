  λ(cObject : Kind)
→ λ(cArrow : cObject → cObject → Type)
→ λ(dObject : Kind)
→ λ(dArrow : dObject → dObject → Type)
→ λ(f : dObject → cObject)
→ λ(fFunctor : ./../Functor/Type dObject dArrow cObject cArrow f)
→ λ(g : cObject → dObject)
→ λ(adjunction : ./Type cObject cArrow dObject dArrow f g)
→   { identity =
        adjunction.counit
    , op =
          λ(a : cObject)
        → fFunctor.map (g a) (g (f (g a))) (adjunction.unit (g a))
    }
  : ./../Comonad/Type
    cObject
    cArrow
    (./../Compose/Type cObject dObject cObject f g)
