  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(category : ./../Category/Type object arrow)
→ λ(w : object → object)
→     let costarArrow = ./../Costar/Type object arrow w
  
  in    λ(extract : ∀(a : object) → costarArrow a a)
      → λ ( extend
          :   ∀(a : object)
            → ∀(b : object)
            → ∀(f : costarArrow a b)
            → arrow (w a) (w b)
          )
      →   { map =
                λ(b : object)
              → λ(a : object)
              → λ(fn : arrow a b)
              → extend a b (category.compose (w a) a b fn (extract a))
          , identity =
              extract
          , op =
              λ(a : object) → extend a (w a) (category.identity (w a))
          }
        : ./Type object arrow w
