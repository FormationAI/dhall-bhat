    let Applicative = ./../../Applicative/Type

in  let Semigroup =
          ./../../Semigroup/Type Type ./../../Function/Type ./../../Tuple/Type

in    λ(a : Type)
    → λ(semigroup : Semigroup a)
    → λ(m : Type → Type)
    → λ(applicative : Applicative m)
    →   ./../../Compose/applicative
        m
        applicative
        (./../../Either/Type a)
        (./../../Either/applicative/parallel a semigroup)
      : Applicative (./../Type a m)
