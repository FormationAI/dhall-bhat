    let Applicative = ./../../Applicative/Type

in  let Either = ./../../Either/Type

in  let EitherT = ./../Type

in  let EitherA = ./../../Either/applicative/sequential

in  let ComposeA = ./../../Compose/applicative

in    λ(a : Type)
    → λ(m : Type → Type)
    → λ(applicative : Applicative m)
    → ComposeA m applicative (Either a) (EitherA a) : Applicative (EitherT a m)
