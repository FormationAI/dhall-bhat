--     let Applicative = ./../../Applicative/Type Type ./../../Function/Type

-- in  let Either = ./../../Either/Type

-- in  let EitherT = ./../Type

-- in  let EitherA = ./../../Either/applicative/sequential

-- in  let ComposeA = ./../../Compose/applicative

-- in    λ(a : Type)
--     → λ(m : Type → Type)
--     → λ(applicative : Applicative m)
--     → ComposeA m (Either a) applicative (EitherA a) : Applicative (EitherT a m)
<>
