--     let Applicative = ./../../Applicative/Type Type ./../../Function/Type

-- in  let Either = ./../../Either/Type

-- in  let EitherT = ./../Type

-- in  let EitherA = ./../../Either/Applicative/Parallel

-- in  let ComposeA = ./../../Compose/Applicative

-- in  let Semigroup =
--           ./../../Semigroup/Type Type ./../../Function/Type ./../../Tuple/Type

-- in    λ(a : Type)
--     → λ(semi : Semigroup a)
--     → λ(m : Type → Type)
--     → λ(applicative : Applicative m)
--     →   ComposeA m (Either a) applicative (EitherA a semi)
--       : Applicative (EitherT a m)
<>
