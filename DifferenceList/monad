let fromPureBind = ../Monad/fromPureBind

let DifferenceList = ./Type

let append = ./append

let empty = ./empty

let foldable = ./foldable

in  fromPureBind
      DifferenceList
      (λ(a : Type) → λ(x : a) → λ(l : List a) → [ x ] # l)
      ( λ(a : Type) →
        λ(b : Type) →
        λ(f : DifferenceList a) →
        λ(k : a → DifferenceList b) →
          foldable.fold
            a
            f
            (DifferenceList b)
            (λ(x : a) → λ(l : DifferenceList b) → append b (k x) l)
            (empty b)
      )
