    let Monad = ../Monad/Type 

in  let ReaderT = ./Type 

in  let toFunctor = ../Functor/fromMonad 

in  let toApplicative = ../Applicative/fromMonad 

in    λ(r : Type)
    → λ(m : Type → Type)
    → λ(monad : Monad m)
    → (   { map =
              (./Functor  r m (toFunctor m monad)).map
          , pure =
              (./Applicative  r m (toApplicative m monad)).pure
          , ap =
              (./Applicative  r m (toApplicative m monad)).ap
          , bind =
                λ(a : Type)
              → λ(b : Type)
              → λ(fa : ReaderT r m a)
              → λ(k : a → ReaderT r m b)
              → λ(env : r)
              → monad.bind a b (fa env) (λ(x : a) → k x env)
          }
        : Monad (ReaderT r m)
      )
