    let Monad = ./../Monad/Type

in  let extractApplicative = ./../Monad/extractApplicative

in  let ReaderT = ./Type

in    λ(r : Type)
    → λ(m : Type → Type)
    → λ(monad : Monad m)
    →     ./Applicative r m (extractApplicative m monad)
        ∧ { bind =
                λ(a : Type)
              → λ(b : Type)
              → λ(k : a → ReaderT r m b)
              → λ(fa : ReaderT r m a)
              → λ(env : r)
              → monad.bind a b (λ(x : a) → k x env) (fa env)
          }
      : Monad (ReaderT r m)
