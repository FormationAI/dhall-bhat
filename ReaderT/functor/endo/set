--     let Endofunctor = ./../../../Functor/Endo/Set

-- in  let Reader = ./../../../Reader/Type

-- in  let readerF = ./../../../Reader/Functor/endo/set

-- in  let composeF =
--           ./../../../Compose/functor
--           Type
--           ./../../../Function/Type
--           Type
--           ./../../../Function/Type
--           Type
--           ./../../../Function/Type

-- in    λ(r : Type)
--     → λ(m : Type → Type)
--     → λ(functor : Endofunctor m)
--     → composeF (Reader r) (readerF r) m functor : Endofunctor (./../../Type r m)
<>
