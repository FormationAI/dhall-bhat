    let kArrow = ./../Function/Kind

in  let object = Type

in  let arrow = ./../uncurryT Type Type Type ./../Function/Type

in  let Monad = ./../Monad/Type object arrow

in  let ReaderT = ./Type object arrow

in    λ(r : object)
    →   { lift =
              λ(m : kArrow object object)
            → λ(monad : Monad m)
            → λ(a : object)
            → λ(ma : m a)
            → λ(env : r)
            → ma
        }
      : ./../Transformer/Type
        object
        arrow
        (λ(m : kArrow object object) → ReaderT m r)
