let Applicative = ../Applicative/Type

let ReaderT = ./Type

let Reader = ../Reader/Type

let ReaderA = ../Reader/applicative

let ComposeA = ../Compose/applicative

in  λ(r : Type) →
    λ(m : Type → Type) →
    λ(applicative : Applicative m) →
      ComposeA (Reader r) m (ReaderA r) applicative : Applicative (ReaderT r m)
