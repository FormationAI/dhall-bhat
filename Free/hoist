let Free = ./Type

let hoist
    :   ∀(f : Type → Type)
      → ∀(g : Type → Type)
      → ∀(a : Type)
      → (∀(x : Type) → f x → g x)
      → Free f a
      → Free g a
    =   λ(f : Type → Type)
      → λ(g : Type → Type)
      → λ(a : Type)
      → λ(n : ∀(x : Type) → f x → g x)
      → λ(m : Free f a)
      → λ(r : Type)
      → λ(kp : a → r)
      → λ(kf : g r → r)
      → m r kp (λ(q : f r) → kf (n r q))

in  hoist
