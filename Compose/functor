    let Functor = ./../Functor/Type

in    λ(cObject : Kind)
    → λ(cArrow : cObject → cObject → Type)
    → λ(dObject : Kind)
    → λ(dArrow : dObject → dObject → Type)
    → λ(eObject : Kind)
    → λ(eArrow : eObject → eObject → Type)
    → λ(f : dObject → eObject)
    → λ(fFunctor : Functor dObject eObject dArrow eArrow f)
    → λ(g : cObject → dObject)
    → λ(gFunctor : Functor cObject dObject cArrow dArrow g)
    →   { map =
              λ(a : cObject)
            → λ(b : cObject)
            → λ(k : cArrow a b)
            → fFunctor.map (g a) (g b) (gFunctor.map a b k)
        }
      : Functor
        cObject
        eObject
        cArrow
        eArrow
        (./Type cObject dObject eObject f g)
