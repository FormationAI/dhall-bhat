--     let Applicative = ./../Applicative/Type

-- in    λ(f : Type → Type)
--     → λ(g : Type → Type)
--     → λ(fApplicative : Applicative Type ../Function/Type f)
--     → λ(gApplicative : Applicative Type ../Function/Type g)
--     →     ./functor/endo/set f g fApplicative.{ map } gApplicative.{ map }
--         ∧ { pure =
--                 λ(a : Type)
--               → λ(x : a)
--               → fApplicative.pure (g a) (gApplicative.pure a x)
--           , ap =
--                 λ(a : Type)
--               → λ(b : Type)
--               → λ(k : ./Type f g (a → b))
--               → fApplicative.ap
--                 (g a)
--                 (g b)
--                 ( fApplicative.map
--                   (g (a → b))
--                   (g a → g b)
--                   (gApplicative.ap a b)
--                   k
--                 )
--           }
--       : Applicative Type ../Function/Type (./Type Type f g)
<>
