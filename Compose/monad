  λ(cObject : Kind)
→ λ(cArrow : cObject → cObject → Type)
→ λ(dObject : Kind)
→ λ(dArrow : dObject → dObject → Type)
→ λ(f : dObject → cObject)
→ λ(fFunctor : ./../Functor/Type dObject cObject dArrow cArrow f)
→ λ(g : cObject → dObject)
→ λ(gFunctor : ./../Functor/Type cObject dObject cArrow dArrow g)
→ λ(adjunction : ./../Adjunction/Type cObject dObject cArrow dArrow f g)
→   { map =
          λ(a : dObject)
        → λ(b : dObject)
        → λ(fn : dArrow a b)
        → gFunctor.map (f a) (f b) (fFunctor.map a b fn)
    , identity =
        adjunction.unit
    , op =
          λ(a : dObject)
        → gFunctor.map (f (g (f a))) (f a) (adjunction.counit (f a))
    }
  : ./../Monad/Type dObject dArrow (./Type dObject cObject dObject g f)
