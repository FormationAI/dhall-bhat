{- NB: Since this is currently forced to be in *Set*, it’s quite possible that
       some of the uses of _C_ and _D_ are wrong, since the type system can’t
       distinguish them. So take them with a grain of salt if you’re editing
       this file.
-}
    let kArrow = ./../Function/Kind

in  let cObject = Type

in  let c = ./../Category/Monoidal/Set/cartesian

in  let dObject = Type

in  let Applicative = ./../Applicative/Type c

in  let Compose = ./Type cObject dObject cObject

in  let Day = ./../Day/Type cObject c c

in  let Day/convolution = ./../Day/convolution cObject c c

in    λ(f : kArrow dObject cObject)
    → λ(fApplicative : Applicative f)
    → λ(g : kArrow cObject dObject)
    → λ(gApplicative : Applicative g)
    →   { identity =
              λ(a : cObject)
            → λ(x : a)
            → fApplicative.identity (g a) (gApplicative.identity a x)
        , op =
              λ(i : cObject)
            → λ(day : Day (Compose f g) (Compose f g) i)
            → day
              (f (g i))
              (   λ(b : { _1 : cObject, _2 : cObject })
                → λ(fn : { _1 : b._1, _2 : b._2 } → i)
                → λ(d : { _1 : f (g b._1), _2 : f (g b._2) })
                → fApplicative.op
                  (g i)
                  (   λ(fr : cObject)
                    → λ(fDay : Day/convolution f f (g i) fr)
                    → fDay
                      { _1 = g b._1, _2 = g b._2 }
                      (   λ(p : { _1 : g b._1, _2 : g b._2 })
                        → gApplicative.op
                          i
                          (   λ(gr : cObject)
                            → λ(gDay : Day/convolution g g i gr)
                            → gDay b fn p
                          )
                      )
                      d
                  )
              )
        }
      : Applicative (Compose f g)
