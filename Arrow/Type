    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(f : kArrow (kProduct Type Type) Type)
    →   { arr :
            ∀(a : Type) → ∀(b : Type) → (a → b) → f { _1 = a, _2 = b }
        , split :
              ∀(a : Type)
            → ∀(b : Type)
            → ∀(c : Type)
            → ∀(d : Type)
            → f { _1 = a, _2 = b }
            → f { _1 = c, _2 = d }
            → f { _1 = { _1 : a, _2 : c }, _2 = { _1 : b, _2 : d } }
        , fanout :
              ∀(a : Type)
            → ∀(b : Type)
            → ∀(c : Type)
            → f { _1 = a, _2 = b }
            → f { _1 = a, _2 = c }
            → f { _1 = a, _2 = { _1 : b, _2 : c } }
        }
      ⩓ ./../Category/Type Type f
      ⩓ ./../Strong/Type
        Type
        Type
        (./../uncurryT Type Type Type ./../Function/Type)
        (./../uncurryT Type Type Type ./../Function/Type)
        f
