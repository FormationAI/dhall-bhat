{-
   TODO: Unify `Category` and `Strong` better here – probably formulating
  `Category` in terms of `Monoid` will clear this up.
-}
  λ(f : Type → Type → Type)
→   { arr :
        ∀(a : Type) → ∀(b : Type) → (a → b) → f a b
    , split :
          ∀(a : Type)
        → ∀(b : Type)
        → ∀(c : Type)
        → ∀(d : Type)
        → f a b
        → f c d
        → f { _1 : a, _2 : c } { _1 : b, _2 : d }
    , fanout :
          ∀(a : Type)
        → ∀(b : Type)
        → ∀(c : Type)
        → f a b
        → f a c
        → f a { _1 : b, _2 : c }
    }
  ⩓ ./../Category/type Type f
  ⩓ ./../Strong/type
    Type
    ./../Function/Type
    Type
    ./../Function/Type
    (λ(x : { _1 : Type, _2 : Type }) → f x._1 x._2)
