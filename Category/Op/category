  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(category : ./../Type object arrow)
→     let opArrow = ./Type object arrow
  
  in    { identity =
            category.identity
        , op =
              λ(a : object)
            → λ(b : object)
            → λ ( p
                :   ∀(r : Type)
                  → (∀(z : object) → opArrow z b → opArrow a z → r)
                  → r
                )
            → category.op
              b
              a
              (   λ(r : Type)
                → λ(arrowsOut : ∀(z : object) → arrow z a → arrow b z → r)
                → p
                  r
                  (   λ(z : object)
                    → λ(f : opArrow z b)
                    → λ(g : opArrow a z)
                    → arrowsOut z g f
                  )
              )
        }
      : ./../Type object opArrow
