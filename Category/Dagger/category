  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(category : ./../Type object arrow)
→     let opArrow = ./../Op/Type object arrow
  
  in  let opCategory = ./../Op/category object arrow category
  
  in  let Dagger = ./Type object arrow
  
  in    { identity =
              λ(a : object)
            → { _1 = category.identity a, _2 = opCategory.identity a }
        , op =
              λ(a : object)
            → λ(b : object)
            → λ ( p
                :   ∀(r : Type)
                  → (∀(z : object) → Dagger z b → Dagger a z → r)
                  → r
                )
            → { _1 =
                  category.op
                  a
                  b
                  (   λ(r : Type)
                    → λ(arrowsOut : ∀(z : object) → arrow z b → arrow a z → r)
                    → p
                      r
                      (   λ(z : object)
                        → λ(f : Dagger z b)
                        → λ(g : Dagger a z)
                        → arrowsOut z f._1 g._1
                      )
                  )
              , _2 =
                  opCategory.op
                  a
                  b
                  (   λ(r : Type)
                    → λ ( arrowsOut
                        : ∀(z : object) → opArrow z b → opArrow a z → r
                        )
                    → p
                      r
                      (   λ(z : object)
                        → λ(f : Dagger z b)
                        → λ(g : Dagger a z)
                        → arrowsOut z f._2 g._2
                      )
                  )
              }
        }
      : ./../Type object Dagger
