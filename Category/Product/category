  λ(cObject : Kind)
→ λ(cArrow : cObject → cObject → Type)
→ λ(cCategory : ./../type cObject cArrow)
→ λ(dObject : Kind)
→ λ(dArrow : dObject → dObject → Type)
→ λ(dCategory : ./../type dObject dArrow)
→     let object = { _1 : cObject, _2 : dObject }
  
  in  let arrow = ./type cObject cArrow dObject dArrow
  
  in    { identity =
              λ(a : object)
            → { _1 = cCategory.identity a._1, _2 = dCategory.identity a._2 }
        , compose =
              λ(a : object)
            → λ(b : object)
            → λ(c : object)
            → λ(f : arrow b c)
            → λ(g : arrow a b)
            → { _1 =
                  cCategory.compose a._1 b._1 c._1 f._1 g._1
              , _2 =
                  dCategory.compose a._2 b._2 c._2 f._2 g._2
              }
        }
      : ./../type object arrow
