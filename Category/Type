{- FIXME: This should use `./../Monoid/Type … (./../Category/Monoidal/Profunctor
          object morphism)`, but the identity in that monoidal category
          definition isn’t correct (or, if it is, I can’t figure out how to use
          it). So instead, we just build the `Semigroup`, and then write a
          custom identity. But this means we’re not structurally a `Monoid`.
-}
    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(object : Kind)
    →     let profunctor = kArrow (kProduct object object) Type
      
      in    λ(morphism : profunctor)
          →   { identity : ∀(a : object) → morphism { _1 = a, _2 = a } }
            ⩓ ./../Semigroupoid/Type object morphism
