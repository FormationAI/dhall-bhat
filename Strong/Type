  λ(cObject : Kind)
→ λ(cArrow : cObject → cObject → Type)
→ λ(dObject : Kind)
→ λ(dArrow : dObject → dObject → Type)
→     let object = { _1 : dObject, _2 : cObject }
  
  in  let arrow =
              λ(a : object)
            → λ(b : object)
            → { _1 :
                  ./../Category/Op/Type dObject dArrow a._1 b._1
              , _2 :
                  cArrow a._2 b._2
              }
  
  in    λ(f : dObject → cObject → Type)
      →   { lmap :
                ∀(a : dObject)
              → ∀(b : dObject)
              → ∀(c : cObject)
              → ./../Category/Op/Type dObject dArrow a b
              → f a c
              → f b c
          , rmap :
                ∀(a : dObject)
              → ∀(b : cObject)
              → ∀(c : cObject)
              → cArrow b c
              → f a b
              → f a c
          }
        ⩓ ./../Functor/Profunctor/Type cObject cArrow dObject dArrow f
