  λ(cObject : Kind)
→ λ(cArrow : cObject → cObject → Type)
→ λ(dObject : Kind)
→ λ(dArrow : dObject → dObject → Type)
→ λ(dCategory : ./../Category/Type dObject dArrow)
→     let object = cObject → dObject
  
  in  let arrow = ./Type cObject dObject dArrow
  
  in    { identity =
            λ(a : object) → λ(i : cObject) → dCategory.identity (a i)
        , compose =
              λ(a : object)
            → λ(b : object)
            → λ(c : object)
            → λ(f : arrow b c)
            → λ(g : arrow a b)
            → λ(i : cObject)
            → dCategory.compose (a i) (b i) (c i) (f i) (g i)
        }
      : ./../Category/Type object arrow
