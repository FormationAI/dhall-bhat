    let Yoneda = ./../../Type

in    λ(m : Type → Type)
    → λ(mFunctor : ./../../../Functor/Endo/Set m)
    → λ(f : Type → Type)
    → λ(fFunctor : ./../../../Functor/Endo/Set f)
    → λ ( fFunctorK
        : ./../../../Functor/Endo/Star Type ./../../../Function/Type m f
        )
    →   { map =
              λ(a : Type)
            → λ(b : Type)
            → λ(fn : a → m b)
            → λ(fa : Yoneda f a)
            → mFunctor.map
              (f b)
              (Yoneda f b)
              (./../../lift f fFunctor b)
              (fFunctorK.map a b fn (./../../lower f a fa))
        }
      : ./../../../Functor/Endo/Star Type ./../../../Function/Type m (Yoneda f)
