    let kArrow = ./../Function/Kind

in  let kProduct = ./../Tuple/Kind

in    λ(object : Kind)
    → λ(cat : ./../Category/Monoidal/Type kArrow kProduct object)
    → λ(category : ./../Category/Type object cat.arrow)
    → λ ( bifunctor
        : ./../Functor/Bifunctor/Type
          object
          object
          object
          cat.arrow
          cat.arrow
          cat.arrow
          cat.op
        )
    → λ(m : object)
    → λ(group : ./Type object cat m)
    → category.op
      { _1 = cat.op { _1 = m, _2 = m }, _2 = m }
      (   λ(r : Type)
        → λ ( arrowsOut
            :   ∀(z : object)
              → cat.arrow { _1 = z, _2 = m }
              → cat.arrow { _1 = cat.op { _1 = m, _2 = m }, _2 = z }
              → r
            )
        → arrowsOut
          (cat.op { _1 = m, _2 = m })
          group.op
          ( ( ./../Functor/Bifunctor/impliedSecondFunctor
              object
              cat.arrow
              category
              object
              cat.arrow
              object
              cat.arrow
              cat.op
              bifunctor
              m
            ).map
            m
            m
            group.inverse
          )
      )
