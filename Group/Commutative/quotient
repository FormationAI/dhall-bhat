    let kArrow = ./../../Function/Kind

in  let kProduct = ./../../Tuple/Kind

in    λ(object : Kind)
    → λ(cat : ./../../Category/Monoidal/Type kArrow kProduct object)
    → λ(category : ./../../Category/Type object cat.arrow)
    → λ ( bifunctor
        : ./../../Functor/Bifunctor/Type
          object
          object
          object
          cat.arrow
          cat.arrow
          cat.arrow
          cat.op
        )
    → λ(m : object)
    → λ(group : ./Type object cat m)
    → ./../rightQuotient
      object
      cat
      category
      bifunctor
      m
      (./extractGroup object cat m group)
