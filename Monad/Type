let Applicative = ../Applicative/Type

let Monad
    : (Type → Type) → Type
    = λ(f : Type → Type) →
        { bind : ∀(a : Type) → ∀(b : Type) → ∀(fa : f a) → ∀(k : a → f b) → f b
        }

in  λ(f : Type → Type) → Applicative f ⩓ Monad f
