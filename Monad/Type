    let Functor = ../Functor/Type 

in  let Applicative = ../Applicative/Type 

in  let Monad
        : (Type → Type) → Type
        =   λ(f : Type → Type)
          →   { bind :
                  ∀(a : Type) → ∀(b : Type) → ∀(fa : f a) → ∀(k : a → f b) → f b
              }
            ⩓ Applicative f

in  Monad
