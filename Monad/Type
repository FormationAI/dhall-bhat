    let Applicative = ./../Applicative/Type

in  let Monad
        : (Type → Type) → Type
        =   λ(f : Type → Type)
          → { bind : ∀(a : Type) → ∀(b : Type) → (a → f b) → f a → f b }

in  λ(f : Type → Type) → Applicative f ⩓ Monad f
