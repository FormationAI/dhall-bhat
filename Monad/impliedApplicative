    let kArrow = ./../Function/Kind

in  let object = Type

in  let cat = ./../Category/Monoidal/Set/cartesian

in    λ(f : kArrow object object)
    → λ(monad : ./Type object cat.arrow f)
    →   { identity =
            monad.identity
        , op =
              λ(i : object)
            → λ ( day
                : ∀(r : Type) → ./../Day/convolution object cat cat f f i r → r
                )
            → day
              (f i)
              (   λ(b : { _1 : object, _2 : object })
                → λ(fn : { _1 : b._1, _2 : b._2 } → i)
                → λ(d : { _1 : f b._1, _2 : f b._2 })
                → monad.op
                  i
                  ( monad.map
                    (b._2 → i)
                    (f i)
                    (λ(fn : b._2 → i) → monad.map b._2 i fn d._2)
                    ( monad.map
                      b._1
                      (b._2 → i)
                      (λ(x : b._1) → λ(y : b._2) → fn { _1 = x, _2 = y })
                      d._1
                    )
                  )
              )
        }
      : ./../Applicative/Type cat f
