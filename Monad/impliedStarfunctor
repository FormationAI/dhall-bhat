  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(semigroupoid : ./../Semigroupoid/Type object arrow)
→ λ(m : object → object)
→ λ(monad : ./Type object arrow m)
→   { map =
          λ(a : object)
        → λ(b : object)
        → λ(f : arrow a (m b))
        → semigroupoid.op
          (m a)
          (m b)
          (   λ(r : Type)
            → λ(arrowsOut : ∀(z : object) → arrow z (m b) → arrow (m a) z → r)
            → arrowsOut (m (m b)) (monad.op b) (monad.map a (m b) f)
          )
    }
  : ./../Functor/ToTypes/Star/Type object arrow m m
