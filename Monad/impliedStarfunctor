--   λ(object : Kind)
-- → λ(arrow : object → object → Type)
-- → λ(semigroupoid : ./../Semigroupoid/Type object arrow)
-- → λ(m : object → object)
-- → λ(monad : ./Type object arrow m)
-- →   { map =
--           λ(a : object)
--         → λ(b : object)
--         → λ(f : arrow a (m b))
--         → semigroupoid.compose
--           (m a)
--           (m (m b))
--           (m b)
--           (monad.op b)
--           ( (./impliedEndofunctor object arrow semigroupoid m monad).map
--             a
--             (m b)
--             f
--           )
--     }
--   : ./../Functor/ToTypes/Star/Type object arrow m


-- id : c -> m c
-- op : m (m d) -> m d

-- bind : (a -> m b) -> m a -> m b
-- bind f = op . map f

-- ap : m (a -> b) -> m a -> m b
-- ap f a = bind (\x1 -> bind (\x2 -> id (x1 x2)) a) f

-- map : (a -> b) -> m a -> m b
-- map = bind (\x1 -> id (f xi))
<>
