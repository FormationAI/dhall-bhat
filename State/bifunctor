  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(product : object → object → object)
→ λ ( bifunctor
    : ./../Functor/Bifunctor/Type object object object arrow arrow arrow product
    )
→ λ(semigroupoid : ./../Semigroupoid/Type object arrow)
→     let State = ./Type object arrow product
  
  in    { map =
              λ(a : { _1 : object, _2 : object })
            → λ(b : { _1 : object, _2 : object })
            → λ ( f
                : { _1 :
                      { _1 : arrow a._1 b._1, _2 : arrow b._1 a._1 }
                  , _2 :
                      arrow a._2 b._2
                  }
                )
            → λ(st : State a._1 a._2)
            → semigroupoid.op
              b._1
              (product b._1 b._2)
              (   λ(r : Type)
                → λ ( arrowsOut
                    :   ∀(z : object)
                      → arrow z (product b._1 b._2)
                      → arrow b._1 z
                      → r
                    )
                → arrowsOut
                  a._1
                  ( semigroupoid.op
                    a._1
                    (product b._1 b._2)
                    (   λ(r : Type)
                      → λ ( arrowsOut
                          :   ∀(z : object)
                            → arrow z (product b._1 b._2)
                            → arrow a._1 z
                            → r
                          )
                      → arrowsOut
                        (product a._1 a._2)
                        (bifunctor.map a b { _1 = f._1._1, _2 = f._2 })
                        st
                    )
                  )
                  f._1._2
              )
        }
      : ./../Functor/Bifunctor/Type
        object
        object
        Type
        (./../Category/Dagger/Type object arrow)
        arrow
        ./../Function/Type
        State
