{- This is very similar to Haskell’s `Traversable`, except that it can be
   implemented for an arbitrary `m`, doesn’t necessarily require an
  `Applicative` instance, and also may be _more_ constrained than `Applicative`.
-}
  λ(object : Kind)
→ λ(arrow : object → object → Type)
→ λ(m : object → object)
→ ./../Type object (./../../../Star/Type object arrow m)
