let Applicative = ./Type

let leftApConst
    : ∀(f : Type → Type) →
      ∀(app : Applicative f) →
      ∀(a : Type) →
      ∀(b : Type) →
      f a →
      f b →
        f a
    = λ(f : Type → Type) →
      λ(app : Applicative f) →
      λ(a : Type) →
      λ(b : Type) →
      λ(fa : f a) →
      λ(fb : f b) →
        ./liftA2 f app a b a (λ(aVal : a) → λ(bVal : b) → aVal) fa fb

in  leftApConst
