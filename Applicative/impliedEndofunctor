    let cat = ./../Category/Monoidal/Set/cartesian

in    λ(f : Type → Type)
    → λ(applicative : ./Type cat f)
    →   { map =
              λ(a : Type)
            → λ(b : Type)
            → λ(fn : a → b)
            → λ(fa : f a)
            → applicative.op
              b
              (   λ(r : Type)
                → λ ( day
                    :   ∀(c : { _1 : Type, _2 : Type })
                      → ({ _1 : c._1, _2 : c._2 } → b)
                      → { _1 : f c._1, _2 : f c._2 }
                      → r
                    )
                → day
                  { _1 = a → b, _2 = a }
                  (λ(p : { _1 : a → b, _2 : a }) → p._1 p._2)
                  { _1 = applicative.identity (a → b) fn, _2 = fa }
              )
        }
      : ./../Functor/Endo/Type
        Type
        (./../uncurryT Type Type Type ./../Function/Type)
        f
