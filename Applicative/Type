    let Functor = ../Functor/Type 

in  let Applicative
        : (Type → Type) → Type
        =   λ(f : Type → Type)
          →   { ap :
                    ∀(a : Type)
                  → ∀(b : Type)
                  → ∀(g : f (a → b))
                  → ∀(fa : f a)
                  → f b
              , pure :
                  ∀(a : Type) → a → f a
              }
            ⩓ Functor f

in  Applicative
