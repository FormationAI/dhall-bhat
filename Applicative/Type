    let Functor = ./../Functor/Endo/Types

in  let Applicative
        : (Type → Type) → Type
        =   λ(f : Type → Type)
          → { ap :
                ∀(a : Type) → ∀(b : Type) → ∀(g : f (a → b)) → ∀(fa : f a) → f b
            , pure :
                ∀(a : Type) → a → f a
            }

in  λ(f : Type → Type) → Functor f ⩓ Applicative f
