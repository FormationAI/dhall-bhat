let Traversable = ../Traversable/Type

let Applicative = ../Applicative/Type

let liftA2 = ../Applicative/liftA2

let fold = (./foldable).fold

in      ./foldable
      ∧ ./functor
      ∧ { traverse =
            λ(f : Type → Type) →
            λ(applicative : Applicative f) →
            λ(a : Type) →
            λ(b : Type) →
            λ(g : a → f b) →
            λ(ts : List a) →
              let liftCons =
                    liftA2
                      f
                      applicative
                      b
                      (List b)
                      (List b)
                      (λ(x : b) → λ(xs : List b) → [ x ] # xs)

              in  fold
                    a
                    ts
                    (f (List b))
                    (λ(x : a) → λ(y : f (List b)) → liftCons (g x) y)
                    (applicative.pure (List b) ([] : List b))
        }
    : Traversable List
