--   λ(m : Type → Type)
-- → λ(applicative : ./../../../Applicative/Type Type ./../../../Function/Type m)
-- →   { map =
--           λ(a : Type)
--         → λ(b : Type)
--         → λ(f : a → m b)
--         → λ(fa : List a)
--         →     let liftCons =
--                     applicative.op
--                     b
--                     (List b)
--                     (λ(x : b) → λ(xs : List b) → [ x ] # xs)
          
--           in  List/fold
--               a
--               fa
--               (m (List b))
--               (λ(x : a) → liftCons (f x))
--               (applicative.identity (List b) ([] : List b))
--     }
--   : ./../../../Functor/Endo/Star m List
<>
