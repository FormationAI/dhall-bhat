  λ(m : Type → Type)
→ λ(applicative : ./../../../Applicative/Type m)
→   { map =
          λ(a : Type)
        → λ(b : Type)
        → λ(f : a → m b)
        → λ(fa : List a)
        →     let liftCons =
                      λ(mb : m b)
                    → λ(mlb : m (List b))
                    → applicative.op
                      (List b)
                      (   λ(r : Type)
                        → λ(day : ./../../../Day/convolution m m (List b) r)
                        → day
                          b
                          (List b)
                          { _1 =
                              mb
                          , _2 =
                              mlb
                          , _3 =
                              λ(x : b) → λ(xs : List b) → [ x ] # xs
                          }
                      )
          
          in  List/fold
              a
              fa
              (m (List b))
              (λ(x : a) → liftCons (f x))
              (applicative.identity (List b) ([] : List b))
    }
  : ./../../../Functor/Endo/Star Type ./../../../Function/Type m List
