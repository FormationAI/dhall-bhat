    let Applicative = ../Applicative/Type 

in  let fold = ./Foldable .fold

in  let map = ./Functor .map

in  (   { map =
            map
        , pure =
            λ(a : Type) → λ(x : a) → [ x ]
        , ap =
              λ(a : Type)
            → λ(b : Type)
            → λ(g : List (a → b))
            → λ(fa : List a)
            → fold
              (a → b)
              g
              (List b)
              (λ(k : a → b) → λ(xs : List b) → map a b k fa # xs)
              ([] : List b)
        }
      : Applicative List
    )
